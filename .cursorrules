# restaurante-front/.cursorrules
rules:
  - "Contexto: App de restaurante en Angular (standalone) con vistas de menú, carrito, checkout, perfiles y rutas por rol; estilos SCSS; posible SSR/SSG."
  - "Estilo y Calidad: ESLint + Prettier (eslint-config-prettier activo); imports ordenados; tipado estricto; evitar any; componentes pequeños y reutilizables; lógica en servicios; manejo de estado simple (o NgRx si ya está definido); tokens de diseño consistentes; ChangeDetectionStrategy.OnPush cuando aplique."
  - "Accesibilidad y Performance: usar atributos aria-; evitar layout shifts; lazy loading por rutas; dividir bundles; imágenes optimizadas; changeDetection cuando sea viable."
  - "Pruebas: Jest + @testing-library/angular + jest-dom; tests de componentes (render, eventos, accesibilidad), pipes y servicios; HttpTestingController para APIs; cobertura mínima definida; reutilizar mocks de src/app/shared/mocks y ajustarlos si es necesario, evitando mocks ad-hoc en los tests y teniendo en cuenta los datos ingresados en db, presentes en /context"
  - "Seguridad: sanitizar HTML; no almacenar PII; no hardcodear claves/endpoints privados; variables por entorno; validar inputs de formularios."
  - "Convenciones de Git: Conventional Commits (feat/ui:, fix/ui:, chore/deps:, perf/ui:, refactor/ui:); PRs con capturas o story si hay cambios visuales; commitlint + husky para validar mensajes."
  - "Ignorar: node_modules/, dist/, .angular/, coverage/, .env*, tmp/."
  - "Instrucciones IA: priorizar accesibilidad y performance; no introducir librerías nuevas sin justificación; sugerir lazy loading/guards/resolvers; generar tests cuando se propongan componentes/servicios; corregir tests con cada cambio para garantizar covertura del 100%; respetar stylelint para SCSS."
  - "Estilos: Garantizar que todos los componentes creados y los que estemos modificando, tengan estilos que sean adecuados tanto para web como para webview."
  - "Diseño Estándar: Todas las tarjetas (.card) y tablas (.table) DEBEN seguir el estilo definido en _base.scss basado en el login: fondo blanco (#ffffff), bordes redondeados (20px), sombra elegante (0 20px 50px rgba(0,0,0,0.08)), borde sutil (1px solid #e5e7eb), padding generoso (2rem), efecto hover con elevación, tipografía clara con colores #2d3748 para títulos y #4a5568 para contenido. Este es el estilo oficial de 'El fogón DE MARÍA'."
  - "Integración con backend: Toda la información necesaria para construir Services, validar tests y crear mocks, está en restaurante-frontend\context, no creemos mocks, si es necesario, modifiquemos para que hagan match con los datos presentes en DB."
  - "WebView: Toda la información necesaria para construir el WebView, está en restaurante-frontend\docs\webview.md, no creemos mocks, si es necesario, modifiquemos para que hagan match con los datos presentes en DB."
  - "Webview: Todo cambio que hagamos en el WebView, es probado en el dispositivo real, no en el emulador. Adicionalmente, cuando se indique modificar el webview, no se debe modificar para web ni para web mobile, es decir, navegadores web y web mobile no deben ser afectados."
  - "Estilos globales: Siempre usaremos los estilos base de la app (variables y _base.scss) y evitaremos estilos personalizados en las hojas de estilo de los componentes; si existen, los migraremos a estilos globales reutilizables."
  - "Antes de crear o sugerir nuevos estilos, VALIDAR primero que no exista ya un patrón en src/assets/styles.scss (y sus _variables.scss/_base.scss/_utilities.scss). Todo componente debe tomar estilos desde allí."
  - "Barra amarilla: usar el título estándar .section-title en todas las vistas."
  - "Margen superior desktop: envolver vistas en el contenedor .page-shell (excepto Not-found). Valor desktop: 4rem."
  - "Breakpoints oficiales: WEB DESKTOP >= 992px (lg Bootstrap); WEB MOBILE < 992px o cuando hay menú hamburguesa; WebView es nativo (capacitor/cordova) y sigue docs en docs/webview.md."
  - "Colores: Todo color DEBE venir de src/assets/_variables.scss (incluye rgba() precalculados). No se permiten hex/rgb/rgba literales en componentes/estilos; si falta un token, agregarlo a _variables.scss primero."
  - "Menús de Acciones: Toda ruta que presente múltiples opciones (crear, editar, consultar, ver, etc.) DEBE usar el patrón de menú estándar definido en _base.scss: .menu-grid (contenedor grid responsive), .menu-card (tarjeta con hover y barra lateral de color), .menu-card--{color} (variantes: blue, green, orange, red, purple, primary), .menu-card__icon (icono de 60x60px con fondo de color suave), .menu-card__content (título + descripción), .menu-card__arrow (flecha de navegación). Ejemplo: admin/acciones, admin/reservas. NO crear estilos personalizados para menús; usar las clases globales."
  - "Subtítulo en Menús: Todo menú de acciones DEBE incluir un subtítulo descriptivo debajo del título principal. Estructura: 1) Propiedad en el componente TypeScript: subtitulo = 'Descripción breve y clara'; 2) HTML: <p class='subtitle text-center mb-4'>{{ subtitulo }}</p> después del <h1 class='section-title'>; 3) SCSS: .subtitle con color #6b7280 y font-size 0.95rem. El subtítulo debe describir brevemente el propósito del menú."
